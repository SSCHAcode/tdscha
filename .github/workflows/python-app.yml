# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ Fast_LANCZOS ]
  pull_request:
    branches: [ Fast_LANCZOS ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install ase spglib==2.2 julia
        python -c 'import julia; julia.install()'
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Prepare the installation
      run: |
        sudo apt-get update
        # Install the fortran compiler with lapack and blas
        sudo apt-get install gfortran libblas-dev liblapack-dev build-essential \
                             mpich libopenmpi-dev libgl1-mesa-glx  libglib2.0-0 \
                             libboost-all-dev

        pip install mpi4py
                             
        
        git clone https://github.com/SSCHAcode/CellConstructor.git
        cd CellConstructor && python setup.py install --user && cd ..
        rm -r CellConstructor
        
        git clone https://github.com/SSCHAcode/python-sscha.git
        cd python-sscha && python setup.py install --user && cd ..
        rm -r python-sscha
        
        MPICC=mpicc python setup.py install --user
        
        cd CModules; make; cd ..
    - name: Test with pytest
      run: |
        pytest
